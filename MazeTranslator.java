//MazeTranslator.java (8/15/2011)
//translates a Maze3D maze into an lt3d scene
//by Matthew Weidner (www.mattweidner.com)

package com.mattweidner.lt3d.scene;

import java.io.*;

public class MazeTranslator {

    public static void main( String args[] ) throws Exception
    {
        if( args.length != 3 ) {
            System.out.println( "Usage: java MazeTranslator <infile> <outfile> scale" );
            return;
        }

        File inFile = new File( args[ 0 ] );
        File outFile = new File( args[ 1 ] );
        double scale = Double.parseDouble( args[ 2 ] );

        BufferedReader in = new BufferedReader( new FileReader( inFile ) );
        String mazeContents = "";
        String line = null;
        while( (line=in.readLine()) != null ) mazeContents += line + "\n";
        Maze maze = new Maze( mazeContents );

        BufferedWriter out = new BufferedWriter( new FileWriter( outFile ) );

        //property line
        String name = maze.getName();
        String description = maze.getDescription();
        int xMax = maze.getDepth();
        int yMax = maze.getHeight();
        int zMax = maze.getWidth();
        out.write( "p \"" + name + "\" \"" + description + "\" " + scale + " " +
                scale + " " + scale + "  " + (xMax+1) + " " + (yMax+1) + " " + (zMax+1)
        );
        out.newLine();

        out.write( "//Generated by MazeTranslator from file " + args[ 0 ] );
        out.newLine();
        out.newLine();

        //gravity
        out.write( "a \"g f\"" );
        out.newLine();
        //first player's start position, at beginning of maze
        out.write( "a \"s 0  " + 0.5 + " " + (yMax-0.5) + " " + 0.5 +
                "  0 0 -1 0 1 0 1 0 0\""
        );
        out.newLine();
        out.newLine();

        //lights
        out.write( "l a  255 255 255" );
        out.newLine();
        out.write( "l d  255 255 255  1.0 -1.0 1.0" );
        out.newLine();
        out.newLine();

        //shape lines
        out.write( "s 0,0,0 1,0,0 1,0,1 0,0,1 0 0" );
        out.newLine();
        out.write( "s 0,0,0 0,1,0 1,1,0 1,0,0 0 1" );
        out.newLine();
        out.write( "s 0,0,0 0,1,0 0,1,1 0,0,1 0 2" );
        out.newLine();
        out.newLine();

        //texture lines
        out.write( "t rel:textures/maze.png 0 0" );
        out.newLine();
        out.write( "t col:0,0,0 0 1 b" );
        out.newLine();
        out.write( "t rel:textures/end.png 0 2" );
        out.newLine();
        out.write( "t rel:textures/start.png 0 3" );
        out.newLine();
        out.newLine();

        //data lines
        out.write( "//entrance and exit" );
        out.newLine();
        out.write( "d 2 3  0.05 " + (yMax-1) + " 0" );
        out.newLine();
        out.write( "d 2 2  " + (xMax-0.05) + " 0 " + (zMax-1) );
        out.newLine();
        out.newLine();
        out.write( "//maze tiles" );
        out.newLine();

        for( int h = 0; h < yMax; h++ ) {
            for( int d = 0; d < xMax; d++ ) {
                for( int w = 0; w < zMax; w++ ) {
                    if( !maze.isBackOpen( (yMax - h - 1), d, w ) ) {
                        out.write( "d 2 0  " + d + " " + h + " " + w );
                        out.newLine();
                        out.write( "d 2 1  " + d + " " + h + " " + w );
                        out.newLine();
                    }
                    if( !maze.isBottomOpen( (yMax - h - 1), d, w ) ) {
                        out.write( "d 0 0  " + d + " " + h + " " + w );
                        out.newLine();
                        out.write( "d 0 1  " + d + " " + h + " " + w );
                        out.newLine();
                    }
                    if( !maze.isLeftOpen( (yMax - h - 1), d, w ) ) {
                        out.write( "d 1 0  " + d + " " + h + " " + w );
                        out.newLine();
                        out.write( "d 1 1  " + d + " " + h + " " + w );
                        out.newLine();
                    }

                    //outer border
                    if( h == (yMax - 1) ) {
                        out.write( "d 0 0  " + d + " " + yMax + " " + w );
                        out.newLine();
                        out.write( "d 0 1  " + d + " " + yMax + " " + w );
                        out.newLine();
                    }
                    if( d == (xMax - 1) ) {
                        out.write( "d 2 0  " + xMax + " " + h + " " + w );
                        out.newLine();
                        out.write( "d 2 1  " + xMax + " " + h + " " + w );
                        out.newLine();
                    }
                    if( w == (zMax - 1) ) {
                        out.write( "d 1 0  " + d + " " + h + " " + zMax );
                        out.newLine();
                        out.write( "d 1 1  " + d + " " + h + " " + zMax );
                        out.newLine();
                    }
                }
            }
        }

        out.newLine();
        out.write( "//end" );


        in.close();
        out.close();

        System.out.println( "Remember to add start positions." );
    }
}
